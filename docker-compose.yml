version: '3.8'

services:
  # Main application
  financial-risk-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: financial_risk_system
    ports:
      - "8080:8080"
    environment:
      - FLASK_ENV=production
      - DB_TYPE=postgres
      - PG_HOST=postgres_db
      - PG_PORT=5432
      - PG_DATABASE=risk_control
      - PG_USER=postgres
      - PG_PASSWORD=secure_password_change_in_production
      - SECRET_KEY=super-secure-secret-key-change-in-production
      - LOG_LEVEL=INFO
      - API_ENABLED=true
    volumes:
      - app_logs:/app/logs
      - app_models:/app/models
      - app_backups:/app/backups
    depends_on:
      postgres_db:
        condition: service_healthy
      redis_cache:
        condition: service_healthy
    networks:
      - financial_risk_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database
  postgres_db:
    image: postgres:15-alpine
    container_name: financial_risk_postgres
    environment:
      - POSTGRES_DB=risk_control
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=secure_password_change_in_production
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - financial_risk_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d risk_control"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session storage
  redis_cache:
    image: redis:7-alpine
    container_name: financial_risk_redis
    command: redis-server --appendonly yes --requirepass redis_password_change_in_production
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - financial_risk_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: financial_risk_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - financial-risk-app
    networks:
      - financial_risk_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: financial_risk_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - financial_risk_network
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: financial_risk_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password_change_in_production
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - financial_risk_network
    restart: unless-stopped

  # Log aggregation with ELK stack (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: financial_risk_elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - financial_risk_network
    restart: unless-stopped
    profiles:
      - elk

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: financial_risk_logstash
    volumes:
      - ./elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - app_logs:/app/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - financial_risk_network
    restart: unless-stopped
    profiles:
      - elk

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: financial_risk_kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - financial_risk_network
    restart: unless-stopped
    profiles:
      - elk

# Networks
networks:
  financial_risk_network:
    driver: bridge
    name: financial_risk_network

# Volumes
volumes:
  postgres_data:
    name: financial_risk_postgres_data
  redis_data:
    name: financial_risk_redis_data
  app_logs:
    name: financial_risk_app_logs
  app_models:
    name: financial_risk_app_models
  app_backups:
    name: financial_risk_app_backups
  nginx_logs:
    name: financial_risk_nginx_logs
  prometheus_data:
    name: financial_risk_prometheus_data
  grafana_data:
    name: financial_risk_grafana_data
  elasticsearch_data:
    name: financial_risk_elasticsearch_data 